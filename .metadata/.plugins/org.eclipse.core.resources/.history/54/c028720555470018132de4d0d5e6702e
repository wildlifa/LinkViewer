/*
 *  Andrei Croitor
 *  University of Stuttgart
 *  2018 © 
 *  
 *  This class represents a cell.
 */

package model;

public class Cell {
	
	protected static int countID = 0;
	public int cellID;
	
	Model model;
	
	PositiveEdge topLeftEdge = null;
	PositiveEdge bottomRightEdge = null;
	VerticalEdge leftEdge = null; 
	VerticalEdge rightEdge = null;
	NegativeEdge bottomLeftEdge = null;
	NegativeEdge topRightEdge = null;
	
	PositiveEdge topRightOuterEdge = null;
	PositiveEdge bottomLeftOuterEdge = null;
	VerticalEdge topOuterEdge = null; 
	VerticalEdge bottomOuterEdge = null;
	NegativeEdge bottomRightOuterEdge = null;
	NegativeEdge topLeftOuterEdge = null;
	
	Cell rightCell = null;
	Cell leftCell = null;
	Cell topRightCell = null;
	Cell topLeftCell = null;
	Cell bottomRightCell = null;
	Cell bottomLeftCell = null;
	
	UpNode topNode = null;
	UpNode bottomLeftNode = null;
	UpNode bottomRightNode = null;
	DownNode bottomNode = null;
	DownNode topLeftNode = null;
	DownNode topRightNode = null;
		
	
	public Cell(Model aModel, String generationType) {
		model = aModel;
		model.cells.add(this);
		cellID = countID;
		countID++;
		
		if (generationType.equals("0")) {
			
			//  linking nodes to cell
			topNode = new UpNode(model, 2, 0);
			bottomLeftNode = new UpNode(model, 0, 3);
			bottomRightNode = new UpNode(model, 4, 3);
			bottomNode = new DownNode(model, 2, 4);
			topLeftNode = new DownNode(model, 0, 1);
			topRightNode = new DownNode(model, 4, 1);
			
			//  linking edges to cell
			//  linking nodes to edges
			topLeftEdge = new PositiveEdge(model,  topNode, topLeftNode);
			bottomRightEdge = new PositiveEdge(model, bottomRightNode, bottomNode);
			leftEdge = new VerticalEdge(model, bottomLeftNode, topLeftNode);
			rightEdge = new VerticalEdge(model, bottomRightNode, topRightNode);
			bottomLeftEdge = new NegativeEdge(model, bottomLeftNode, bottomNode);
			topRightEdge = new NegativeEdge(model, topNode, topRightNode);
			
			//  linking edges to nodes
			topNode.bottomLeftEdge = topLeftEdge;
			topNode.bottomRightEdge = topRightEdge;
			
			topLeftNode.bottomEdge = leftEdge;
			topLeftNode.topRightEdge = topLeftEdge;
			
			topRightNode.bottomEdge = rightEdge;
			topRightNode.topLeftEdge = topRightEdge;
			
			bottomNode.topLeftEdge = bottomLeftEdge;
			bottomNode.topRightEdge = bottomRightEdge;
			
			bottomLeftNode.topEdge = leftEdge;
			bottomLeftNode.bottomRightEdge = bottomLeftEdge;
			
			bottomRightNode.topEdge = rightEdge;
			bottomRightNode.bottomLeftEdge = bottomRightEdge;
			
			//  linking cells to nodes
			topNode.bottomCell = this;
			topLeftNode.bottomRightCell = this;
			topRightNode.bottomLeftCell = this;
			bottomNode.topCell = this;
			bottomLeftNode.topRightCell = this;
			bottomRightNode.topLeftCell = this;
			
			//  linking cells to edges
			topLeftEdge.bottomRightCell = this;
			bottomRightEdge.topLeftCell = this;
			leftEdge.rightCell = this;
			rightEdge.leftCell = this;
			bottomLeftEdge.topRightCell = this;
			topRightEdge.bottomLeftCell = this;		
			
			//  linking edges to edges
			topLeftEdge.bottomEdge = leftEdge;
			topLeftEdge.rightEdge = topRightEdge;
			
			bottomRightEdge.topEdge = rightEdge;
			bottomRightEdge.leftEdge = bottomLeftEdge;
			
			leftEdge.bottomRightEdge = bottomLeftEdge;
			leftEdge.topRightEdge = topLeftEdge;
			
			rightEdge.topLeftEdge = topRightEdge;
			rightEdge.bottomLeftEdge = bottomRightEdge;
			
			bottomLeftEdge.topEdge = leftEdge;
			bottomLeftEdge.rightEdge = bottomRightEdge;
			
			topRightEdge.bottomEdge = rightEdge;
			topRightEdge.leftEdge = topLeftEdge;		
					
		}
		
		if (generationType.equals("1")) {
			
			//  linking cells to cells
			model.leftScoutCell.rightCell = this;
			leftCell = model.leftScoutCell;
			
			//  linking nodes to cell
			topNode = new UpNode(model, (int) leftCell.topNode.getX() + 4, (int) leftCell.topNode.getY());
			bottomLeftNode = leftCell.bottomRightNode;
			bottomRightNode = new UpNode(model, (int) leftCell.bottomRightNode.getX() + 4, (int) leftCell.bottomRightNode.getY());
			bottomNode = new DownNode(model, (int) leftCell.bottomNode.getX() + 4, (int) leftCell.bottomNode.getY());
			topLeftNode = leftCell.topRightNode;
			topRightNode = new DownNode(model, (int) leftCell.topRightNode.getX() + 4, (int) leftCell.topRightNode.getY());
			
			//  linking edges to cells
			//  linking nodes to edges
			topLeftEdge = new PositiveEdge(model,  topNode, topLeftNode);
			bottomRightEdge = new PositiveEdge(model, bottomRightNode, bottomNode);
			leftEdge = leftCell.rightEdge;
			rightEdge = new VerticalEdge(model, bottomRightNode, topRightNode);
			bottomLeftEdge = new NegativeEdge(model, bottomLeftNode, bottomNode);
			topRightEdge = new NegativeEdge(model, topNode, topRightNode);
					
			//  linking edges to nodes
			topNode.bottomLeftEdge = topLeftEdge;
			topNode.bottomRightEdge = topRightEdge;
			
			topLeftNode.topRightEdge = topLeftEdge;
			
			topRightNode.bottomEdge = rightEdge;
			topRightNode.topLeftEdge = topRightEdge;
			
			bottomNode.topLeftEdge = bottomLeftEdge;
			bottomNode.topRightEdge = bottomRightEdge;
			
			bottomLeftNode.bottomRightEdge = bottomLeftEdge;
			
			bottomRightNode.topEdge = rightEdge;
			bottomRightNode.bottomLeftEdge = bottomRightEdge;
			
			//  linking cells to nodes
			topNode.bottomCell = this;
			topLeftNode.bottomRightCell = this;
			topRightNode.bottomLeftCell = this;
			bottomNode.topCell = this;
			bottomLeftNode.topRightCell = this;
			bottomRightNode.topLeftCell = this;
			
			//  linking cells to edges
			topLeftEdge.bottomRightCell = this;
			bottomRightEdge.topLeftCell = this;
			leftEdge.rightCell = this;
			rightEdge.leftCell = this;
			bottomLeftEdge.topRightCell = this;
			topRightEdge.bottomLeftCell = this;
			
			//  linking edges to edges
			topLeftEdge.bottomEdge = leftEdge;
			topLeftEdge.rightEdge = topRightEdge;
			topLeftEdge.leftEdge = leftCell.topRightEdge;
			
			bottomRightEdge.topEdge = rightEdge;
			bottomRightEdge.leftEdge = bottomLeftEdge;
			
			leftEdge.bottomRightEdge = bottomLeftEdge;
			leftEdge.topRightEdge = topLeftEdge;
			
			rightEdge.topLeftEdge = topRightEdge;
			rightEdge.bottomLeftEdge = bottomRightEdge;
			
			bottomLeftEdge.topEdge = leftEdge;
			bottomLeftEdge.rightEdge = bottomRightEdge;
			bottomLeftEdge.leftEdge = leftCell.bottomRightEdge;
			
			topRightEdge.bottomEdge = rightEdge;
			topRightEdge.leftEdge = topLeftEdge;
			
			topLeftOuterEdge = leftCell.topRightEdge;
			bottomLeftOuterEdge = leftCell.bottomRightEdge;
			leftCell.topRightOuterEdge = topLeftEdge;
			leftCell.bottomRightOuterEdge = bottomLeftEdge;
		}
		
		if (generationType.equals("2")) {
			
			//  linking cells to cells
			bottomLeftCell = model.topGeneralCell;
			bottomLeftCell.topRightCell = this;
			bottomRightCell = bottomLeftCell.rightCell;
			bottomRightCell.topLeftCell = this;
			
			//  linking nodes to cell
			topNode = new UpNode(model, (int) bottomLeftCell.topRightNode.getX(), (int) bottomLeftCell.topRightNode.getY() - 4);
			bottomLeftNode = bottomLeftCell.topNode;
			bottomRightNode = bottomRightCell.topNode;
			bottomNode = bottomLeftCell.topRightNode;
			topLeftNode = new DownNode(model, (int) bottomLeftCell.topNode.getX(), (int) (int) bottomLeftCell.topNode.getY() - 2);
			topRightNode = new DownNode(model, (int) bottomRightCell.topNode.getX(), (int) bottomRightCell.topNode.getY() - 2);
			
			
			//  linking edges to cells
			//  linking nodes to edges
			topLeftEdge = new PositiveEdge(model,  topNode, topLeftNode);
			bottomRightEdge = bottomRightCell.topLeftEdge;
			leftEdge = new VerticalEdge(model, bottomLeftNode, topLeftNode);
			rightEdge = new VerticalEdge(model, bottomRightNode, topRightNode);
			bottomLeftEdge = bottomLeftCell.topRightEdge;
			topRightEdge = new NegativeEdge(model, topNode, topRightNode);
			
			//  linking edges to nodes
			topNode.bottomLeftEdge = topLeftEdge;
			topNode.bottomRightEdge = topRightEdge;
					
			topLeftNode.topRightEdge = topLeftEdge;
			topLeftNode.bottomEdge = leftEdge;
					
			topRightNode.bottomEdge = rightEdge;
			topRightNode.topLeftEdge = topRightEdge;				
					
			bottomLeftNode.topEdge = leftEdge;
					
			bottomRightNode.topEdge = rightEdge;
			
			//  linking cells to nodes
			topNode.bottomCell = this;
			topLeftNode.bottomRightCell = this;
			topRightNode.bottomLeftCell = this;
			bottomNode.topCell = this;
			bottomLeftNode.topRightCell = this;
			bottomRightNode.topLeftCell = this;
			
			//  linking cells to edges
			topLeftEdge.bottomRightCell = this;
			bottomRightEdge.topLeftCell = this;
			leftEdge.rightCell = this;
			rightEdge.leftCell = this;
			bottomLeftEdge.topRightCell = this;
			topRightEdge.bottomLeftCell = this;

			//  linking edges to edges
			topLeftEdge.bottomEdge = leftEdge;
			topLeftEdge.rightEdge = topRightEdge;
			
			bottomRightEdge.topEdge = rightEdge;
			
			leftEdge.bottomRightEdge = bottomLeftEdge;
			leftEdge.topRightEdge = topLeftEdge;
			leftEdge.bottomLeftEdge = bottomLeftCell.topLeftEdge;
			
			rightEdge.topLeftEdge = topRightEdge;
			rightEdge.bottomLeftEdge = bottomRightEdge;
			rightEdge.bottomRightEdge = bottomRightCell.topRightEdge;
			
			bottomLeftEdge.topEdge = leftEdge;
			
			topRightEdge.bottomEdge = rightEdge;
			topRightEdge.leftEdge = topLeftEdge;
			
			bottomLeftCell.topLeftEdge.topEdge = leftEdge;
			bottomRightCell.topRightEdge.topEdge = rightEdge;
			
			bottomLeftOuterEdge = bottomLeftCell.topLeftEdge;
			bottomOuterEdge = bottomLeftCell.rightEdge;
			bottomRightOuterEdge = bottomRightCell.topRightEdge;
			
			bottomLeftCell.topOuterEdge = leftEdge;
			bottomRightCell.topOuterEdge = rightEdge;
		}

	}
	
}
